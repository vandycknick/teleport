// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/legacy/types/events/devicetrust.proto

package events

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OSType is the same as teleport.devicetrust.v1.OSType.
// Duplicated because gogo doesn't play well with protoc-gen-go.
type OSType int32

const (
	OSType_OS_TYPE_UNSPECIFIED OSType = 0
	// Linux.
	OSType_OS_TYPE_LINUX OSType = 1
	// macOS.
	OSType_OS_TYPE_MACOS OSType = 2
	// Windows.
	OSType_OS_TYPE_WINDOWS OSType = 3
)

var OSType_name = map[int32]string{
	0: "OS_TYPE_UNSPECIFIED",
	1: "OS_TYPE_LINUX",
	2: "OS_TYPE_MACOS",
	3: "OS_TYPE_WINDOWS",
}

var OSType_value = map[string]int32{
	"OS_TYPE_UNSPECIFIED": 0,
	"OS_TYPE_LINUX":       1,
	"OS_TYPE_MACOS":       2,
	"OS_TYPE_WINDOWS":     3,
}

func (x OSType) String() string {
	return proto.EnumName(OSType_name, int32(x))
}

func (OSType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ce48473a0f43394, []int{0}
}

// DeviceMetadata groups device information for events.
type DeviceMetadata struct {
	// ID of the device.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// OS of the device.
	OsType OSType `protobuf:"varint,2,opt,name=os_type,json=osType,proto3,enum=events.OSType" json:"os_type,omitempty"`
	// Device inventory identifier.
	AssetTag string `protobuf:"bytes,3,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag,omitempty"`
	// Device credential identifier.
	CredentialId         string   `protobuf:"bytes,4,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceMetadata) Reset()         { *m = DeviceMetadata{} }
func (m *DeviceMetadata) String() string { return proto.CompactTextString(m) }
func (*DeviceMetadata) ProtoMessage()    {}
func (*DeviceMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce48473a0f43394, []int{0}
}
func (m *DeviceMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetadata.Merge(m, src)
}
func (m *DeviceMetadata) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetadata proto.InternalMessageInfo

// DeviceEvent is a device-related event.
// The event type (Metadata.Type) for device events is always "device". See the
// event code (Metadata.Code) for its meaning.
type DeviceEvent struct {
	// Metadata holds common event metadata.
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:""`
	// Status indicates the outcome of the event.
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// DeviceMetadata holds metadata about the user device.
	Device *DeviceMetadata `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	// UserMetadata holds metadata about the user behind the event.
	User                 *UserMetadata `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeviceEvent) Reset()         { *m = DeviceEvent{} }
func (m *DeviceEvent) String() string { return proto.CompactTextString(m) }
func (*DeviceEvent) ProtoMessage()    {}
func (*DeviceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce48473a0f43394, []int{1}
}
func (m *DeviceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceEvent.Merge(m, src)
}
func (m *DeviceEvent) XXX_Size() int {
	return m.Size()
}
func (m *DeviceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceEvent proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("events.OSType", OSType_name, OSType_value)
	proto.RegisterType((*DeviceMetadata)(nil), "events.DeviceMetadata")
	proto.RegisterType((*DeviceEvent)(nil), "events.DeviceEvent")
}

func init() {
	proto.RegisterFile("teleport/legacy/types/events/devicetrust.proto", fileDescriptor_7ce48473a0f43394)
}

var fileDescriptor_7ce48473a0f43394 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0x86, 0x77, 0xda, 0x12, 0xdb, 0x49, 0xbb, 0xc6, 0x69, 0xd1, 0xa5, 0x42, 0xb6, 0x54, 0xd0,
	0xd5, 0x8b, 0x04, 0xe2, 0x9d, 0x77, 0xb6, 0x89, 0x10, 0xb0, 0x9b, 0x92, 0xec, 0x52, 0x15, 0x21,
	0x4c, 0x93, 0x21, 0x06, 0xd2, 0x9d, 0x90, 0x39, 0x59, 0xd8, 0x37, 0xf1, 0x91, 0x16, 0xbc, 0xe9,
	0x13, 0x2c, 0xba, 0x97, 0x3e, 0x85, 0x64, 0x26, 0xd9, 0xba, 0x37, 0xbd, 0x9a, 0xf0, 0x9f, 0x9f,
	0xff, 0xff, 0x72, 0x38, 0xd8, 0x02, 0x56, 0xb0, 0x92, 0x57, 0x60, 0x17, 0x2c, 0xa3, 0xc9, 0xc2,
	0x86, 0x45, 0xc9, 0x84, 0xcd, 0xe6, 0x6c, 0x06, 0xc2, 0x4e, 0xd9, 0x3c, 0x4f, 0x18, 0x54, 0xb5,
	0x00, 0xab, 0xac, 0x38, 0x70, 0xa2, 0xa9, 0xc9, 0xe9, 0x49, 0xc6, 0x33, 0x2e, 0x25, 0xbb, 0xf9,
	0x52, 0xd3, 0xd3, 0xb7, 0x8f, 0xa6, 0xa9, 0x47, 0x59, 0xcf, 0x7f, 0x22, 0xdc, 0x77, 0x65, 0xfc,
	0x15, 0x03, 0x9a, 0x52, 0xa0, 0xe4, 0x25, 0x3e, 0x50, 0x85, 0x71, 0x9e, 0x0e, 0xd0, 0x19, 0x1a,
	0x1d, 0x84, 0xfb, 0x4a, 0xf0, 0x53, 0xf2, 0x06, 0x3f, 0xe1, 0x22, 0x6e, 0xf2, 0x06, 0x3b, 0x67,
	0x68, 0xd4, 0x77, 0xfa, 0x56, 0x9b, 0x17, 0x44, 0x93, 0x45, 0xc9, 0x42, 0x8d, 0x8b, 0xe6, 0x6d,
	0x52, 0xa8, 0x10, 0x0c, 0x62, 0xa0, 0xd9, 0x60, 0x57, 0xa5, 0x48, 0x61, 0x42, 0x33, 0xf2, 0x0a,
	0x1f, 0x25, 0x15, 0x4b, 0xd9, 0x0c, 0x72, 0x5a, 0x34, 0x35, 0x7b, 0xd2, 0x70, 0xf8, 0x20, 0xfa,
	0xe9, 0xf9, 0x2f, 0x84, 0x75, 0x85, 0xe6, 0x35, 0x0d, 0xe4, 0x03, 0xde, 0xbf, 0x6b, 0x19, 0x25,
	0x96, 0xee, 0x18, 0x5d, 0x77, 0xc7, 0x7e, 0x71, 0xb8, 0x5c, 0x0d, 0x7b, 0xf7, 0xab, 0x21, 0xfa,
	0xbb, 0x1a, 0xf6, 0xc2, 0x8d, 0x9f, 0xbc, 0xc6, 0x9a, 0x00, 0x0a, 0xb5, 0x90, 0xd4, 0xfa, 0x03,
	0x75, 0x24, 0xd5, 0xb0, 0x9d, 0x12, 0x0b, 0x6b, 0xea, 0x57, 0x25, 0xb2, 0xee, 0x3c, 0xef, 0x7c,
	0xdb, 0x3b, 0x0a, 0x5b, 0x17, 0x19, 0xe1, 0xbd, 0x5a, 0xb0, 0x4a, 0xf2, 0xeb, 0xce, 0x49, 0xe7,
	0x9e, 0x0a, 0x56, 0x6d, 0xbc, 0xd2, 0xf1, 0xee, 0x3b, 0xd6, 0xd4, 0x86, 0xc8, 0x0b, 0x7c, 0x1c,
	0x44, 0xf1, 0xe4, 0xeb, 0xb5, 0x17, 0x4f, 0xc7, 0xd1, 0xb5, 0x77, 0xe9, 0x7f, 0xf2, 0x3d, 0xd7,
	0xe8, 0x91, 0x67, 0xf8, 0xa8, 0x1b, 0x7c, 0xf6, 0xc7, 0xd3, 0x2f, 0x06, 0xfa, 0x5f, 0xba, 0xfa,
	0x78, 0x19, 0x44, 0xc6, 0x0e, 0x39, 0xc6, 0x4f, 0x3b, 0xe9, 0xc6, 0x1f, 0xbb, 0xc1, 0x4d, 0x64,
	0xec, 0x5e, 0xb8, 0xcb, 0x3f, 0x66, 0x6f, 0xb9, 0x36, 0xd1, 0xfd, 0xda, 0x44, 0xbf, 0xd7, 0x26,
	0xfa, 0xe6, 0x64, 0x39, 0xfc, 0xa8, 0x6f, 0xad, 0x84, 0xdf, 0xd9, 0x59, 0x45, 0xe7, 0x39, 0x50,
	0xc8, 0xf9, 0x8c, 0x16, 0xf6, 0xe6, 0x38, 0x68, 0x99, 0x6f, 0x5d, 0xc6, 0xad, 0x26, 0x6f, 0xe2,
	0xfd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x71, 0x75, 0xc0, 0x8e, 0x02, 0x00, 0x00,
}

func (m *DeviceMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CredentialId) > 0 {
		i -= len(m.CredentialId)
		copy(dAtA[i:], m.CredentialId)
		i = encodeVarintDevicetrust(dAtA, i, uint64(len(m.CredentialId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AssetTag) > 0 {
		i -= len(m.AssetTag)
		copy(dAtA[i:], m.AssetTag)
		i = encodeVarintDevicetrust(dAtA, i, uint64(len(m.AssetTag)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OsType != 0 {
		i = encodeVarintDevicetrust(dAtA, i, uint64(m.OsType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintDevicetrust(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicetrust(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Device != nil {
		{
			size, err := m.Device.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicetrust(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevicetrust(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDevicetrust(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDevicetrust(dAtA []byte, offset int, v uint64) int {
	offset -= sovDevicetrust(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovDevicetrust(uint64(l))
	}
	if m.OsType != 0 {
		n += 1 + sovDevicetrust(uint64(m.OsType))
	}
	l = len(m.AssetTag)
	if l > 0 {
		n += 1 + l + sovDevicetrust(uint64(l))
	}
	l = len(m.CredentialId)
	if l > 0 {
		n += 1 + l + sovDevicetrust(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovDevicetrust(uint64(l))
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDevicetrust(uint64(l))
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovDevicetrust(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovDevicetrust(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDevicetrust(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDevicetrust(x uint64) (n int) {
	return sovDevicetrust(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicetrust
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicetrust
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicetrust
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicetrust
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsType", wireType)
			}
			m.OsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicetrust
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsType |= OSType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicetrust
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicetrust
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicetrust
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicetrust
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicetrust
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevicetrust
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicetrust(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDevicetrust
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicetrust
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicetrust
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicetrust
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicetrust
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicetrust
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicetrust
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicetrust
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicetrust
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicetrust
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicetrust
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceMetadata{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicetrust
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicetrust
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevicetrust
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserMetadata{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicetrust(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDevicetrust
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevicetrust(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevicetrust
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevicetrust
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevicetrust
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDevicetrust
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDevicetrust
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDevicetrust
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDevicetrust        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevicetrust          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDevicetrust = fmt.Errorf("proto: unexpected end of group")
)
