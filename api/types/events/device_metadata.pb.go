// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: teleport/legacy/types/events/device_metadata.proto

package events

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OSType is the same as teleport.devicetrust.v1.OSType.
// Duplicated because gogo doesn't play well with protoc-gen-go.
type OSType int32

const (
	OSType_OS_TYPE_UNSPECIFIED OSType = 0
	// Linux.
	OSType_OS_TYPE_LINUX OSType = 1
	// macOS.
	OSType_OS_TYPE_MACOS OSType = 2
	// Windows.
	OSType_OS_TYPE_WINDOWS OSType = 3
)

var OSType_name = map[int32]string{
	0: "OS_TYPE_UNSPECIFIED",
	1: "OS_TYPE_LINUX",
	2: "OS_TYPE_MACOS",
	3: "OS_TYPE_WINDOWS",
}

var OSType_value = map[string]int32{
	"OS_TYPE_UNSPECIFIED": 0,
	"OS_TYPE_LINUX":       1,
	"OS_TYPE_MACOS":       2,
	"OS_TYPE_WINDOWS":     3,
}

func (x OSType) String() string {
	return proto.EnumName(OSType_name, int32(x))
}

func (OSType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_62c4769b3f0e8d8d, []int{0}
}

// DeviceMetadata groups device information for events.
type DeviceMetadata struct {
	// ID of the device.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// OS of the device.
	OsType OSType `protobuf:"varint,2,opt,name=os_type,json=osType,proto3,enum=events.OSType" json:"os_type,omitempty"`
	// Device inventory identifier.
	AssetTag string `protobuf:"bytes,3,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag,omitempty"`
	// Device credential identifier.
	CredentialId         string   `protobuf:"bytes,4,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceMetadata) Reset()         { *m = DeviceMetadata{} }
func (m *DeviceMetadata) String() string { return proto.CompactTextString(m) }
func (*DeviceMetadata) ProtoMessage()    {}
func (*DeviceMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_62c4769b3f0e8d8d, []int{0}
}
func (m *DeviceMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetadata.Merge(m, src)
}
func (m *DeviceMetadata) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetadata proto.InternalMessageInfo

func (m *DeviceMetadata) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceMetadata) GetOsType() OSType {
	if m != nil {
		return m.OsType
	}
	return OSType_OS_TYPE_UNSPECIFIED
}

func (m *DeviceMetadata) GetAssetTag() string {
	if m != nil {
		return m.AssetTag
	}
	return ""
}

func (m *DeviceMetadata) GetCredentialId() string {
	if m != nil {
		return m.CredentialId
	}
	return ""
}

func init() {
	proto.RegisterEnum("events.OSType", OSType_name, OSType_value)
	proto.RegisterType((*DeviceMetadata)(nil), "events.DeviceMetadata")
}

func init() {
	proto.RegisterFile("teleport/legacy/types/events/device_metadata.proto", fileDescriptor_62c4769b3f0e8d8d)
}

var fileDescriptor_62c4769b3f0e8d8d = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xef, 0x4a, 0xc2, 0x50,
	0x18, 0xc6, 0x3b, 0x1a, 0x2b, 0x0f, 0x69, 0xeb, 0xf8, 0x21, 0x21, 0x10, 0xa9, 0x0f, 0x49, 0x1f,
	0x36, 0xb0, 0x1b, 0xa8, 0xd4, 0x60, 0x90, 0x4e, 0x9c, 0x62, 0x45, 0x30, 0x5e, 0xb7, 0x97, 0x75,
	0x60, 0x7a, 0xc6, 0xce, 0x9b, 0xe0, 0x9d, 0x74, 0x49, 0x7d, 0xec, 0x12, 0xc2, 0x2b, 0x89, 0x6d,
	0xda, 0x9f, 0x4f, 0x07, 0x7e, 0xef, 0x73, 0x7e, 0x0f, 0x3c, 0xbc, 0x43, 0x18, 0x63, 0xa2, 0x52,
	0xb2, 0x63, 0x8c, 0x20, 0x58, 0xdb, 0xb4, 0x4e, 0x50, 0xdb, 0xb8, 0xc2, 0x25, 0x69, 0x3b, 0xc4,
	0x95, 0x0c, 0xd0, 0x5f, 0x20, 0x41, 0x08, 0x04, 0x56, 0x92, 0x2a, 0x52, 0xc2, 0x28, 0xae, 0xe7,
	0xef, 0x8c, 0xd7, 0x7a, 0x79, 0x62, 0xb0, 0x0d, 0x88, 0x33, 0x5e, 0xd9, 0xfe, 0x91, 0x61, 0x83,
	0xb5, 0x58, 0xbb, 0x32, 0x3e, 0x2c, 0x80, 0x13, 0x8a, 0x4b, 0x7e, 0xa0, 0xb4, 0x9f, 0x15, 0x34,
	0x4a, 0x2d, 0xd6, 0xae, 0x75, 0x6a, 0x56, 0x61, 0xb2, 0x5c, 0x6f, 0xb2, 0x4e, 0x70, 0x6c, 0x28,
	0x9d, 0xbd, 0x99, 0x05, 0xb4, 0x46, 0xf2, 0x09, 0xa2, 0x46, 0xb9, 0xb0, 0xe4, 0x60, 0x02, 0x91,
	0xb8, 0xe0, 0xd5, 0x20, 0xc5, 0x10, 0x97, 0x24, 0x21, 0xce, 0x6a, 0xf6, 0xf3, 0xc0, 0xd1, 0x2f,
	0x74, 0xc2, 0xab, 0x17, 0x6e, 0x14, 0x4e, 0x71, 0xca, 0xeb, 0xae, 0xe7, 0x4f, 0x9e, 0x46, 0x7d,
	0x7f, 0x3a, 0xf4, 0x46, 0xfd, 0xae, 0x73, 0xef, 0xf4, 0x7b, 0xe6, 0x9e, 0x38, 0xe1, 0xd5, 0xdd,
	0xe1, 0xc1, 0x19, 0x4e, 0x1f, 0x4d, 0xf6, 0x17, 0x0d, 0x6e, 0xbb, 0xae, 0x67, 0x96, 0x44, 0x9d,
	0x1f, 0xef, 0xd0, 0xcc, 0x19, 0xf6, 0xdc, 0x99, 0x67, 0x96, 0xef, 0x6e, 0x3e, 0x36, 0x4d, 0xf6,
	0xb9, 0x69, 0xb2, 0xaf, 0x4d, 0x93, 0x3d, 0x77, 0x22, 0x49, 0xaf, 0x6f, 0x73, 0x2b, 0x50, 0x0b,
	0x3b, 0x4a, 0x61, 0x25, 0x09, 0x48, 0xaa, 0x25, 0xc4, 0xf6, 0xcf, 0xb6, 0x90, 0xc8, 0x7f, 0xc3,
	0xce, 0x8d, 0x7c, 0xc9, 0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0xf6, 0x91, 0x8c, 0x7f,
	0x01, 0x00, 0x00,
}

func (m *DeviceMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CredentialId) > 0 {
		i -= len(m.CredentialId)
		copy(dAtA[i:], m.CredentialId)
		i = encodeVarintDeviceMetadata(dAtA, i, uint64(len(m.CredentialId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AssetTag) > 0 {
		i -= len(m.AssetTag)
		copy(dAtA[i:], m.AssetTag)
		i = encodeVarintDeviceMetadata(dAtA, i, uint64(len(m.AssetTag)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OsType != 0 {
		i = encodeVarintDeviceMetadata(dAtA, i, uint64(m.OsType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintDeviceMetadata(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeviceMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeviceMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovDeviceMetadata(uint64(l))
	}
	if m.OsType != 0 {
		n += 1 + sovDeviceMetadata(uint64(m.OsType))
	}
	l = len(m.AssetTag)
	if l > 0 {
		n += 1 + l + sovDeviceMetadata(uint64(l))
	}
	l = len(m.CredentialId)
	if l > 0 {
		n += 1 + l + sovDeviceMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDeviceMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeviceMetadata(x uint64) (n int) {
	return sovDeviceMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsType", wireType)
			}
			m.OsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsType |= OSType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeviceMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeviceMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeviceMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeviceMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeviceMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeviceMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeviceMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeviceMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeviceMetadata = fmt.Errorf("proto: unexpected end of group")
)
