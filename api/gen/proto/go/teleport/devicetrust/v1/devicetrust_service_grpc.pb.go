// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: teleport/devicetrust/v1/devicetrust_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceTrustServiceClient is the client API for DeviceTrustService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceTrustServiceClient interface {
	// CreateDevice creates a device, effectively registering it on Teleport.
	// Devices need to be registered before they can be enrolled.
	//
	// It is possible to create both a Device and a DeviceEnrollToken in a
	// single invocation, see CreateDeviceRequest.create_enroll_token.
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// DeleteDevice hard-deletes a device, removing it and all collected data
	// history from the system.
	//
	// Prefer locking the device instead (see the `tctl lock` command). Deleting a
	// device doesn't invalidate existing device certificates, but does prevent
	// new device authentication ceremonies from occurring.
	//
	// Use with caution.
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// FindDevices retrieves devices by device ID and/or asset tag.
	//
	// It provides an in-between search between fetching a device by ID and
	// listing all devices.
	//
	// ID matches are guaranteed to be present in the response.
	FindDevices(ctx context.Context, in *FindDevicesRequest, opts ...grpc.CallOption) (*FindDevicesResponse, error)
	// GetDevice retrieves a device by ID.
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// ListDevices lists all registered devices.
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// BulkCreateDevices is a bulk variant of CreateDevice.
	//
	// Unlike CreateDevice, it does not support creation of enrollment tokens, as
	// it is meant for bulk inventory registration.
	BulkCreateDevices(ctx context.Context, in *BulkCreateDevicesRequest, opts ...grpc.CallOption) (*BulkCreateDevicesResponse, error)
	// CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
	// An enrollment token is required for the enrollment ceremony. See
	// EnrollDevice.
	CreateDeviceEnrollToken(ctx context.Context, in *CreateDeviceEnrollTokenRequest, opts ...grpc.CallOption) (*DeviceEnrollToken, error)
	// EnrollDevice performs the device enrollment ceremony.
	//
	// Enrollment requires a previously-registered Device and a DeviceEnrollToken,
	// see CreateDevice and CreateDeviceEnrollToken.
	//
	// An enrolled device is allowed, via AuthenticateDevice, to acquire
	// certificates containing device extensions, thus gaining access to
	// device-aware actions.
	EnrollDevice(ctx context.Context, opts ...grpc.CallOption) (DeviceTrustService_EnrollDeviceClient, error)
	// AuthenticateDevice performs the device authentication ceremony.
	//
	// Device authentication exchanges existing user certificates without device
	// extensions for certificates augmented with device extensions. The new
	// certificates allow the user to perform device-aware actions.
	//
	// Only registered and enrolled devices may perform device authentication.
	AuthenticateDevice(ctx context.Context, opts ...grpc.CallOption) (DeviceTrustService_AuthenticateDeviceClient, error)
}

type deviceTrustServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTrustServiceClient(cc grpc.ClientConnInterface) DeviceTrustServiceClient {
	return &deviceTrustServiceClient{cc}
}

func (c *deviceTrustServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/teleport.devicetrust.v1.DeviceTrustService/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/teleport.devicetrust.v1.DeviceTrustService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) FindDevices(ctx context.Context, in *FindDevicesRequest, opts ...grpc.CallOption) (*FindDevicesResponse, error) {
	out := new(FindDevicesResponse)
	err := c.cc.Invoke(ctx, "/teleport.devicetrust.v1.DeviceTrustService/FindDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/teleport.devicetrust.v1.DeviceTrustService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/teleport.devicetrust.v1.DeviceTrustService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) BulkCreateDevices(ctx context.Context, in *BulkCreateDevicesRequest, opts ...grpc.CallOption) (*BulkCreateDevicesResponse, error) {
	out := new(BulkCreateDevicesResponse)
	err := c.cc.Invoke(ctx, "/teleport.devicetrust.v1.DeviceTrustService/BulkCreateDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) CreateDeviceEnrollToken(ctx context.Context, in *CreateDeviceEnrollTokenRequest, opts ...grpc.CallOption) (*DeviceEnrollToken, error) {
	out := new(DeviceEnrollToken)
	err := c.cc.Invoke(ctx, "/teleport.devicetrust.v1.DeviceTrustService/CreateDeviceEnrollToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceTrustServiceClient) EnrollDevice(ctx context.Context, opts ...grpc.CallOption) (DeviceTrustService_EnrollDeviceClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceTrustService_ServiceDesc.Streams[0], "/teleport.devicetrust.v1.DeviceTrustService/EnrollDevice", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTrustServiceEnrollDeviceClient{stream}
	return x, nil
}

type DeviceTrustService_EnrollDeviceClient interface {
	Send(*EnrollDeviceRequest) error
	Recv() (*EnrollDeviceResponse, error)
	grpc.ClientStream
}

type deviceTrustServiceEnrollDeviceClient struct {
	grpc.ClientStream
}

func (x *deviceTrustServiceEnrollDeviceClient) Send(m *EnrollDeviceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceTrustServiceEnrollDeviceClient) Recv() (*EnrollDeviceResponse, error) {
	m := new(EnrollDeviceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceTrustServiceClient) AuthenticateDevice(ctx context.Context, opts ...grpc.CallOption) (DeviceTrustService_AuthenticateDeviceClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceTrustService_ServiceDesc.Streams[1], "/teleport.devicetrust.v1.DeviceTrustService/AuthenticateDevice", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceTrustServiceAuthenticateDeviceClient{stream}
	return x, nil
}

type DeviceTrustService_AuthenticateDeviceClient interface {
	Send(*AuthenticateDeviceRequest) error
	Recv() (*AuthenticateDeviceResponse, error)
	grpc.ClientStream
}

type deviceTrustServiceAuthenticateDeviceClient struct {
	grpc.ClientStream
}

func (x *deviceTrustServiceAuthenticateDeviceClient) Send(m *AuthenticateDeviceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceTrustServiceAuthenticateDeviceClient) Recv() (*AuthenticateDeviceResponse, error) {
	m := new(AuthenticateDeviceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceTrustServiceServer is the server API for DeviceTrustService service.
// All implementations must embed UnimplementedDeviceTrustServiceServer
// for forward compatibility
type DeviceTrustServiceServer interface {
	// CreateDevice creates a device, effectively registering it on Teleport.
	// Devices need to be registered before they can be enrolled.
	//
	// It is possible to create both a Device and a DeviceEnrollToken in a
	// single invocation, see CreateDeviceRequest.create_enroll_token.
	CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error)
	// DeleteDevice hard-deletes a device, removing it and all collected data
	// history from the system.
	//
	// Prefer locking the device instead (see the `tctl lock` command). Deleting a
	// device doesn't invalidate existing device certificates, but does prevent
	// new device authentication ceremonies from occurring.
	//
	// Use with caution.
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error)
	// FindDevices retrieves devices by device ID and/or asset tag.
	//
	// It provides an in-between search between fetching a device by ID and
	// listing all devices.
	//
	// ID matches are guaranteed to be present in the response.
	FindDevices(context.Context, *FindDevicesRequest) (*FindDevicesResponse, error)
	// GetDevice retrieves a device by ID.
	GetDevice(context.Context, *GetDeviceRequest) (*Device, error)
	// ListDevices lists all registered devices.
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// BulkCreateDevices is a bulk variant of CreateDevice.
	//
	// Unlike CreateDevice, it does not support creation of enrollment tokens, as
	// it is meant for bulk inventory registration.
	BulkCreateDevices(context.Context, *BulkCreateDevicesRequest) (*BulkCreateDevicesResponse, error)
	// CreateDeviceEnrollToken creates a DeviceEnrollToken for a Device.
	// An enrollment token is required for the enrollment ceremony. See
	// EnrollDevice.
	CreateDeviceEnrollToken(context.Context, *CreateDeviceEnrollTokenRequest) (*DeviceEnrollToken, error)
	// EnrollDevice performs the device enrollment ceremony.
	//
	// Enrollment requires a previously-registered Device and a DeviceEnrollToken,
	// see CreateDevice and CreateDeviceEnrollToken.
	//
	// An enrolled device is allowed, via AuthenticateDevice, to acquire
	// certificates containing device extensions, thus gaining access to
	// device-aware actions.
	EnrollDevice(DeviceTrustService_EnrollDeviceServer) error
	// AuthenticateDevice performs the device authentication ceremony.
	//
	// Device authentication exchanges existing user certificates without device
	// extensions for certificates augmented with device extensions. The new
	// certificates allow the user to perform device-aware actions.
	//
	// Only registered and enrolled devices may perform device authentication.
	AuthenticateDevice(DeviceTrustService_AuthenticateDeviceServer) error
	mustEmbedUnimplementedDeviceTrustServiceServer()
}

// UnimplementedDeviceTrustServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceTrustServiceServer struct {
}

func (UnimplementedDeviceTrustServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) FindDevices(context.Context, *FindDevicesRequest) (*FindDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDevices not implemented")
}
func (UnimplementedDeviceTrustServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDeviceTrustServiceServer) BulkCreateDevices(context.Context, *BulkCreateDevicesRequest) (*BulkCreateDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateDevices not implemented")
}
func (UnimplementedDeviceTrustServiceServer) CreateDeviceEnrollToken(context.Context, *CreateDeviceEnrollTokenRequest) (*DeviceEnrollToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceEnrollToken not implemented")
}
func (UnimplementedDeviceTrustServiceServer) EnrollDevice(DeviceTrustService_EnrollDeviceServer) error {
	return status.Errorf(codes.Unimplemented, "method EnrollDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) AuthenticateDevice(DeviceTrustService_AuthenticateDeviceServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthenticateDevice not implemented")
}
func (UnimplementedDeviceTrustServiceServer) mustEmbedUnimplementedDeviceTrustServiceServer() {}

// UnsafeDeviceTrustServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceTrustServiceServer will
// result in compilation errors.
type UnsafeDeviceTrustServiceServer interface {
	mustEmbedUnimplementedDeviceTrustServiceServer()
}

func RegisterDeviceTrustServiceServer(s grpc.ServiceRegistrar, srv DeviceTrustServiceServer) {
	s.RegisterService(&DeviceTrustService_ServiceDesc, srv)
}

func _DeviceTrustService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.devicetrust.v1.DeviceTrustService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.devicetrust.v1.DeviceTrustService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_FindDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).FindDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.devicetrust.v1.DeviceTrustService/FindDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).FindDevices(ctx, req.(*FindDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.devicetrust.v1.DeviceTrustService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.devicetrust.v1.DeviceTrustService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_BulkCreateDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).BulkCreateDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.devicetrust.v1.DeviceTrustService/BulkCreateDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).BulkCreateDevices(ctx, req.(*BulkCreateDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_CreateDeviceEnrollToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceEnrollTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrustServiceServer).CreateDeviceEnrollToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.devicetrust.v1.DeviceTrustService/CreateDeviceEnrollToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrustServiceServer).CreateDeviceEnrollToken(ctx, req.(*CreateDeviceEnrollTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceTrustService_EnrollDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceTrustServiceServer).EnrollDevice(&deviceTrustServiceEnrollDeviceServer{stream})
}

type DeviceTrustService_EnrollDeviceServer interface {
	Send(*EnrollDeviceResponse) error
	Recv() (*EnrollDeviceRequest, error)
	grpc.ServerStream
}

type deviceTrustServiceEnrollDeviceServer struct {
	grpc.ServerStream
}

func (x *deviceTrustServiceEnrollDeviceServer) Send(m *EnrollDeviceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceTrustServiceEnrollDeviceServer) Recv() (*EnrollDeviceRequest, error) {
	m := new(EnrollDeviceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceTrustService_AuthenticateDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceTrustServiceServer).AuthenticateDevice(&deviceTrustServiceAuthenticateDeviceServer{stream})
}

type DeviceTrustService_AuthenticateDeviceServer interface {
	Send(*AuthenticateDeviceResponse) error
	Recv() (*AuthenticateDeviceRequest, error)
	grpc.ServerStream
}

type deviceTrustServiceAuthenticateDeviceServer struct {
	grpc.ServerStream
}

func (x *deviceTrustServiceAuthenticateDeviceServer) Send(m *AuthenticateDeviceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceTrustServiceAuthenticateDeviceServer) Recv() (*AuthenticateDeviceRequest, error) {
	m := new(AuthenticateDeviceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceTrustService_ServiceDesc is the grpc.ServiceDesc for DeviceTrustService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceTrustService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.devicetrust.v1.DeviceTrustService",
	HandlerType: (*DeviceTrustServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceTrustService_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceTrustService_DeleteDevice_Handler,
		},
		{
			MethodName: "FindDevices",
			Handler:    _DeviceTrustService_FindDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DeviceTrustService_GetDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _DeviceTrustService_ListDevices_Handler,
		},
		{
			MethodName: "BulkCreateDevices",
			Handler:    _DeviceTrustService_BulkCreateDevices_Handler,
		},
		{
			MethodName: "CreateDeviceEnrollToken",
			Handler:    _DeviceTrustService_CreateDeviceEnrollToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnrollDevice",
			Handler:       _DeviceTrustService_EnrollDevice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AuthenticateDevice",
			Handler:       _DeviceTrustService_AuthenticateDevice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "teleport/devicetrust/v1/devicetrust_service.proto",
}
