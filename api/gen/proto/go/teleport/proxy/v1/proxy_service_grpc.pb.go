// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: teleport/proxy/v1/proxy_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyServiceClient interface {
	// GetClusterDetails provides cluster information that may affect how transport
	// should occur.
	GetClusterDetails(ctx context.Context, in *GetClusterDetailsRequest, opts ...grpc.CallOption) (*GetClusterDetailsResponse, error)
	// ProxySSH establishes an SSH connection to the target host over a bidirectional stream.
	//
	// The client must first send a DialTarget before the connection is established. Agent frames
	// will be populated if SSH Agent forwarding is enabled for the connection. SSH frames contain
	// raw SSH payload to be processed by an x/crypto/ssh.Client or x/crypto/ssh.Server.
	ProxySSH(ctx context.Context, opts ...grpc.CallOption) (ProxyService_ProxySSHClient, error)
	// ProxyCluster establishes a connection to the target cluster.
	//
	// The client must first send a ProxyClusterRequest with the desired cluster name before the
	// connection is established. After which the connection can be used to construct a new
	// auth.Client to the tunneled cluster.
	ProxyCluster(ctx context.Context, opts ...grpc.CallOption) (ProxyService_ProxyClusterClient, error)
}

type proxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceClient(cc grpc.ClientConnInterface) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) GetClusterDetails(ctx context.Context, in *GetClusterDetailsRequest, opts ...grpc.CallOption) (*GetClusterDetailsResponse, error) {
	out := new(GetClusterDetailsResponse)
	err := c.cc.Invoke(ctx, "/teleport.proxy.v1.ProxyService/GetClusterDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) ProxySSH(ctx context.Context, opts ...grpc.CallOption) (ProxyService_ProxySSHClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[0], "/teleport.proxy.v1.ProxyService/ProxySSH", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyServiceProxySSHClient{stream}
	return x, nil
}

type ProxyService_ProxySSHClient interface {
	Send(*ProxySSHRequest) error
	Recv() (*ProxySSHResponse, error)
	grpc.ClientStream
}

type proxyServiceProxySSHClient struct {
	grpc.ClientStream
}

func (x *proxyServiceProxySSHClient) Send(m *ProxySSHRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyServiceProxySSHClient) Recv() (*ProxySSHResponse, error) {
	m := new(ProxySSHResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyServiceClient) ProxyCluster(ctx context.Context, opts ...grpc.CallOption) (ProxyService_ProxyClusterClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProxyService_ServiceDesc.Streams[1], "/teleport.proxy.v1.ProxyService/ProxyCluster", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyServiceProxyClusterClient{stream}
	return x, nil
}

type ProxyService_ProxyClusterClient interface {
	Send(*ProxyClusterRequest) error
	Recv() (*ProxyClusterResponse, error)
	grpc.ClientStream
}

type proxyServiceProxyClusterClient struct {
	grpc.ClientStream
}

func (x *proxyServiceProxyClusterClient) Send(m *ProxyClusterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyServiceProxyClusterClient) Recv() (*ProxyClusterResponse, error) {
	m := new(ProxyClusterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyServiceServer is the server API for ProxyService service.
// All implementations must embed UnimplementedProxyServiceServer
// for forward compatibility
type ProxyServiceServer interface {
	// GetClusterDetails provides cluster information that may affect how transport
	// should occur.
	GetClusterDetails(context.Context, *GetClusterDetailsRequest) (*GetClusterDetailsResponse, error)
	// ProxySSH establishes an SSH connection to the target host over a bidirectional stream.
	//
	// The client must first send a DialTarget before the connection is established. Agent frames
	// will be populated if SSH Agent forwarding is enabled for the connection. SSH frames contain
	// raw SSH payload to be processed by an x/crypto/ssh.Client or x/crypto/ssh.Server.
	ProxySSH(ProxyService_ProxySSHServer) error
	// ProxyCluster establishes a connection to the target cluster.
	//
	// The client must first send a ProxyClusterRequest with the desired cluster name before the
	// connection is established. After which the connection can be used to construct a new
	// auth.Client to the tunneled cluster.
	ProxyCluster(ProxyService_ProxyClusterServer) error
	mustEmbedUnimplementedProxyServiceServer()
}

// UnimplementedProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServiceServer struct {
}

func (UnimplementedProxyServiceServer) GetClusterDetails(context.Context, *GetClusterDetailsRequest) (*GetClusterDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterDetails not implemented")
}
func (UnimplementedProxyServiceServer) ProxySSH(ProxyService_ProxySSHServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxySSH not implemented")
}
func (UnimplementedProxyServiceServer) ProxyCluster(ProxyService_ProxyClusterServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxyCluster not implemented")
}
func (UnimplementedProxyServiceServer) mustEmbedUnimplementedProxyServiceServer() {}

// UnsafeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceServer will
// result in compilation errors.
type UnsafeProxyServiceServer interface {
	mustEmbedUnimplementedProxyServiceServer()
}

func RegisterProxyServiceServer(s grpc.ServiceRegistrar, srv ProxyServiceServer) {
	s.RegisterService(&ProxyService_ServiceDesc, srv)
}

func _ProxyService_GetClusterDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).GetClusterDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.proxy.v1.ProxyService/GetClusterDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).GetClusterDetails(ctx, req.(*GetClusterDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_ProxySSH_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).ProxySSH(&proxyServiceProxySSHServer{stream})
}

type ProxyService_ProxySSHServer interface {
	Send(*ProxySSHResponse) error
	Recv() (*ProxySSHRequest, error)
	grpc.ServerStream
}

type proxyServiceProxySSHServer struct {
	grpc.ServerStream
}

func (x *proxyServiceProxySSHServer) Send(m *ProxySSHResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyServiceProxySSHServer) Recv() (*ProxySSHRequest, error) {
	m := new(ProxySSHRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProxyService_ProxyCluster_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).ProxyCluster(&proxyServiceProxyClusterServer{stream})
}

type ProxyService_ProxyClusterServer interface {
	Send(*ProxyClusterResponse) error
	Recv() (*ProxyClusterRequest, error)
	grpc.ServerStream
}

type proxyServiceProxyClusterServer struct {
	grpc.ServerStream
}

func (x *proxyServiceProxyClusterServer) Send(m *ProxyClusterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyServiceProxyClusterServer) Recv() (*ProxyClusterRequest, error) {
	m := new(ProxyClusterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyService_ServiceDesc is the grpc.ServiceDesc for ProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.proxy.v1.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterDetails",
			Handler:    _ProxyService_GetClusterDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProxySSH",
			Handler:       _ProxyService_ProxySSH_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProxyCluster",
			Handler:       _ProxyService_ProxyCluster_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "teleport/proxy/v1/proxy_service.proto",
}
