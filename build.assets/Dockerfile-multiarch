# #############################################################################
# This Dockerfile aims to be the single source of truth for linux buildboxes on
# all supported architectures. This is still wildly aspirational, and
#   a) currently only supports ARM32 & ARM64, and
#   b) is currently only used for ARM64 builds
# #############################################################################

FROM centos:7 AS base

# Automatically supplied by the Docker buildkit
ARG TARGETARCH

# #############################################################################
# Platform-specific customisation.
# #############################################################################

## ARM 32 #####################################################################
FROM base AS platform-setup-arm
ARG GOLANG_ARCH=armv6l
ARG YUM_UPDATE_FLAGS=""
RUN echo "armhfp" > /etc/yum/vars/basearch && \
    echo "armv7hl" > /etc/yum/vars/arch && \
    echo "armv7hl-redhat-linux-gnu" > /etc/rpm/platform

## ARM 64 #####################################################################
FROM base AS platform-setup-arm64
ARG GOLANG_ARCH=arm64

# Installing the kerenel packages causes the update to hang on aarch64, so we
# skip upgrading them.
ARG YUM_UPDATE_FLAGS="--exclude kernel-*"
RUN echo "aarch64-redhat-linux-gnu" > /etc/rpm/platform

# #############################################################################
# The minimal buildbox contains the resources required to build a minimal
# version of Teleport, with no optional features (e.g. BPF)
# #############################################################################

FROM platform-setup-$TARGETARCH AS minimal-buildbox

# NOTE: We expect the GOLANG_VERSION to contain the leading `go` in the version
#       string (e,g, go1.19), as produced by `go version`
ARG GOLANG_VERSION
ARG RUST_VERSION
ARG UID
ARG GID

RUN groupadd ci --gid=$GID -o && \
    useradd ci --uid=$UID --gid=$GID --create-home --shell=/bin/sh

RUN install --directory --mode=0700 --owner=ci --group=ci /var/lib/teleport

ENV LANGUAGE=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    LC_CTYPE=en_US.UTF-8

RUN yum update -y $YUM_UPDATE_FLAGS && \
    yum install -y     \
        git \
        gcc \
        gcc-c++ \
        make \
        pam-devel \
        perl-IPC-Cmd \
        tree \
        which \
        zip \
        zlib-static && \
    yum clean all && \
    localedef -c -i en_US -f UTF-8 en_US.UTF-8

## Install Go #################################################################
RUN mkdir -p /opt && \
    mkdir -p /go  && \
    curl https://storage.googleapis.com/golang/$GOLANG_VERSION.linux-$GOLANG_ARCH.tar.gz | tar xz -C /opt && \
    chmod a+w /go && \
    chmod a+w /var/lib && \
    /opt/go/bin/go version
ENV GOPATH="/go" \
    GOROOT="/opt/go" \
    PATH="$PATH:/opt/go/bin:/go/bin"

## Install Node ###############################################################
RUN yum install -y python3
ARG NODE_VERSION
ENV NODE_URL="https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${BUILDARCH}.tar.xz"
ENV NODE_PATH="/usr/local/lib/nodejs-linux"
ENV PATH="$PATH:${NODE_PATH}/bin"
RUN export NODE_ARCH=$(if [ "$BUILDARCH" = "amd64" ]; then echo "x64"; else echo "arm64"; fi) && \
     export NODE_URL="https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.xz" && \
     mkdir -p ${NODE_PATH} && \
     curl -o /tmp/nodejs.tar.xz -L ${NODE_URL} && \
     tar -xJf /tmp/nodejs.tar.xz -C /usr/local/lib/nodejs-linux --strip-components=1
RUN corepack enable yarn

## Install Rust ###############################################################
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH \
    RUST_VERSION=$RUST_VERSION

RUN mkdir -p $RUSTUP_HOME && chmod a+w $RUSTUP_HOME && \
    mkdir -p $CARGO_HOME/registry && chmod -R a+w $CARGO_HOME

RUN chmod a-w /

USER ci

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain $RUST_VERSION && \
    rustup --version && \
    cargo --version && \
    rustc --version && \
    rustup component add rustfmt clippy
