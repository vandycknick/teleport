suite: Deployment
templates:
  - deployment.yaml
  - config.yaml
tests:
  - it: sets Deployment annotations when specified
    template: deployment.yaml
    values:
      - ../.lint/annotations.yaml
    asserts:
      - equal:
          path: metadata.annotations.kubernetes\.io/deployment
          value: test-annotation
      - equal:
          path: metadata.annotations.kubernetes\.io/deployment-different
          value: 3
      - matchSnapshot:
          path: spec.template.spec

  - it: sets Pod annotations when specified
    template: deployment.yaml
    values:
      - ../.lint/annotations.yaml
    asserts:
      - equal:
          path: spec.template.metadata.annotations.kubernetes\.io/pod
          value: test-annotation
      - equal:
          path: spec.template.metadata.annotations.kubernetes\.io/pod-different
          value: 4
      - matchSnapshot:
          path: spec.template.spec

  - it: should not have more than one replica in standalone mode
    template: deployment.yaml
    set:
      chartMode: standalone
      clusterName: helm-lint.example.com
    asserts:
      - equal:
          path: spec.replicas
          value: 1
      - matchSnapshot:
          path: spec.template.spec

  - it: should have multiple replicas when replicaCount is set
    template: deployment.yaml
    set:
      chartMode: custom
      clusterName: helm-lint.example.com
      highAvailability:
        replicaCount: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3
      - matchSnapshot:
          path: spec.template.spec

  - it: should set affinity when set in values
    template: deployment.yaml
    set:
      chartMode: custom
      clusterName: helm-lint.example.com
      highAvailability:
        replicaCount: 3
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: gravitational.io/dedicated
                    operator: In
                    values:
                      - teleport
    asserts:
      - isNotNull:
          path: spec.template.spec.affinity
      - matchSnapshot:
          path: spec.template.spec

  - it: should set required affinity when highAvailability.requireAntiAffinity is set
    template: deployment.yaml
    values:
      - ../.lint/aws-ha-antiaffinity.yaml
    asserts:
      - isNotNull:
          path: spec.template.spec.affinity
      - isNotNull:
          path: spec.template.spec.affinity.podAntiAffinity
      - isNotNull:
          path: spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution
      - matchSnapshot:
          path: spec.template.spec

  - it: should set tolerations when set in values
    template: deployment.yaml
    values:
      - ../.lint/tolerations.yaml
    asserts:
      - isNotNull:
          path: spec.template.spec.tolerations
      - matchSnapshot:
          path: spec.template.spec

  - it: should set resources when set in values
    template: deployment.yaml
    values:
      - ../.lint/resources.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 2
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 4Gi
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 1
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 2Gi
      - matchSnapshot:
          path: spec.template.spec

  - it: should set securityContext when set in values
    template: deployment.yaml
    values:
      - ../.lint/security-context.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false
      - equal:
          path: spec.template.spec.containers[0].securityContext.privileged
          value: false
      - equal:
          path: spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem
          value: false
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 99
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 99
      - matchSnapshot:
          path: spec.template.spec

  - it: should not set securityContext when is empty object (default value)
    template: deployment.yaml
    values:
      - ../.lint/security-context-empty.yaml
    asserts:
      - isNull:
          path: spec.template.spec.containers[0].securityContext
      - matchSnapshot:
          path: spec.template.spec

  # we can't use the dynamic chart version or appVersion as a variable in the tests,
  # so we override it manually and check that gets set instead
  # this saves us having to update the test every time we cut a new release
  - it: should do enterprise things when when enterprise is set in values
    template: deployment.yaml
    set:
      clusterName: helm-lint.example.com
      enterprise: true
      teleportVersionOverride: 8.3.4
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: public.ecr.aws/gravitational/teleport-ent:8.3.4
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /var/lib/license
            name: "license"
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: license
            secret:
              secretName: license
      - matchSnapshot:
          path: spec.template.spec

  - it: should not do enterprise things when when enterprise is not set in values
    template: deployment.yaml
    set:
      clusterName: helm-lint
      teleportVersionOverride: 8.3.4
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: public.ecr.aws/gravitational/teleport:8.3.4
      - notContains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /var/lib/license
            name: "license"
            readOnly: true
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: license
            secret:
              secretName: license
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount GCP credentials in GCP mode
    template: deployment.yaml
    values:
      - ../.lint/gcp-ha.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport-secrets
            name: "gcp-credentials"
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: gcp-credentials
            secret:
              secretName: teleport-gcp-credentials
      - matchSnapshot:
          path: spec.template.spec

  - it: should not mount secret when credentialSecretName is blank in values
    template: deployment.yaml
    values:
      - ../.lint/gcp-ha-workload.yaml
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport-secrets
            name: "gcp-credentials"
            readOnly: true
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: gcp-credentials
            secret:
              secretName: teleport-gcp-credentials
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount GCP credentials for initContainer in GCP mode
    template: deployment.yaml
    values:
      - ../.lint/gcp-ha.yaml
      - ../.lint/initcontainers.yaml
    asserts:
      - contains:
          path: spec.template.spec.initContainers[0].volumeMounts
          content:
            mountPath: /etc/teleport-secrets
            name: "gcp-credentials"
            readOnly: true
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount TLS certs when cert-manager is enabled
    template: deployment.yaml
    values:
      - ../.lint/gcp-ha-acme.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport-tls
            name: "teleport-tls"
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: teleport-tls
            secret:
              secretName: teleport-tls
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount TLS certs for initContainer when cert-manager is enabled
    template: deployment.yaml
    values:
      - ../.lint/gcp-ha-acme.yaml
      - ../.lint/initcontainers.yaml
    asserts:
      - contains:
          path: spec.template.spec.initContainers[0].volumeMounts
          content:
            mountPath: /etc/teleport-tls
            name: "teleport-tls"
            readOnly: true
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount ConfigMap for config in AWS mode
    template: deployment.yaml
    values:
      - ../.lint/aws-ha.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport
            name: "config"
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config
            configMap:
              name: RELEASE-NAME
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount ConfigMap for config in GCP mode
    template: deployment.yaml
    values:
      - ../.lint/gcp-ha.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport
            name: "config"
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config
            configMap:
              name: RELEASE-NAME
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount ConfigMap for config in standalone mode
    template: deployment.yaml
    set:
      chartMode: standalone
      clusterName: helm-lint.example.com
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport
            name: "config"
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config
            configMap:
              name: RELEASE-NAME
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount ConfigMap for config in custom mode
    template: deployment.yaml
    set:
      chartMode: custom
      clusterName: helm-lint.example.com
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport
            name: "config"
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config
            configMap:
              name: RELEASE-NAME
      - matchSnapshot:
          path: spec.template.spec

  - it: should have Recreate strategy in standalone mode
    template: deployment.yaml
    set:
      chartMode: standalone
      clusterName: helm-lint.example.com
    asserts:
      - equal:
          path: spec.strategy.type
          value: Recreate
      - matchSnapshot:
          path: spec.template.spec

  - it: should not have strategy in AWS mode
    template: deployment.yaml
    values:
      - ../.lint/aws-ha.yaml
    asserts:
      - isNull:
          path: spec.template.spec.strategy
      - matchSnapshot:
          path: spec.template.spec

  - it: should not have strategy in GCP mode
    template: deployment.yaml
    values:
      - ../.lint/gcp-ha.yaml
    asserts:
      - isNull:
          path: spec.template.spec.strategy
      - matchSnapshot:
          path: spec.template.spec

  - it: should not have strategy in custom mode
    template: deployment.yaml
    set:
      chartMode: custom
      clusterName: helm-lint.example.com
    asserts:
      - isNull:
          path: spec.template.spec.strategy
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount extraVolumes and extraVolumeMounts
    template: deployment.yaml
    values:
      - ../.lint/volumes.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /path/to/mount
            name: my-mount
      - contains:
          path: spec.template.spec.volumes
          content:
            name: my-mount
            secret:
              secretName: mySecret
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount extraVolumes and extraVolumeMounts
    template: deployment.yaml
    values:
      - ../.lint/volumes.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /path/to/mount
            name: my-mount
      - contains:
          path: spec.template.spec.volumes
          content:
            name: my-mount
            secret:
              secretName: mySecret
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount extraVolumes and extraVolumeMounts
    template: deployment.yaml
    values:
      - ../.lint/volumes.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /path/to/mount
            name: my-mount
      - contains:
          path: spec.template.spec.volumes
          content:
            name: my-mount
            secret:
              secretName: mySecret
      - matchSnapshot:
          path: spec.template.spec

  - it: should set imagePullPolicy when set in values
    template: deployment.yaml
    set:
      clusterName: helm-lint.example.com
      imagePullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: Always
      - matchSnapshot:
          path: spec.template.spec

  - it: should set environment when extraEnv set in values
    template: deployment.yaml
    values:
      - ../.lint/extra-env.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: SOME_ENVIRONMENT_VARIABLE
            value: "some-value"
      - matchSnapshot:
          path: spec.template.spec

  - it: should provision initContainer correctly when set in values
    template: deployment.yaml
    values:
      - ../.lint/initcontainers.yaml
      - ../.lint/resources.yaml
      - ../.lint/extra-env.yaml
    asserts:
      - contains:
          path: spec.template.spec.initContainers[0].args
          content: "echo test"
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: "teleport-init"
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: "alpine"
      - equal:
          path: spec.template.spec.initContainers[0].resources.limits.cpu
          value: 2
      - equal:
          path: spec.template.spec.initContainers[0].resources.limits.memory
          value: 4Gi
      - equal:
          path: spec.template.spec.initContainers[0].resources.requests.cpu
          value: 1
      - equal:
          path: spec.template.spec.initContainers[0].resources.requests.memory
          value: 2Gi
      - matchSnapshot:
          path: spec.template.spec

  - it: should add insecureSkipProxyTLSVerify to args when set in values
    template: deployment.yaml
    set:
      clusterName: helm-lint.example.com
      insecureSkipProxyTLSVerify: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: "--insecure"
      - matchSnapshot:
          path: spec.template.spec

  - it: should expose diag port
    template: deployment.yaml
    set:
      clusterName: helm-lint.example.com
    asserts:
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: diag
            containerPort: 3000
            protocol: TCP
      - matchSnapshot:
          path: spec.template.spec

  - it: should set postStart command if set in values
    template: deployment.yaml
    set:
      clusterName: helm-lint.example.com
      postStart:
        command: ["/bin/echo", "test"]
    asserts:
      - equal:
          path: spec.template.spec.containers[0].lifecycle.postStart.exec.command
          value: ["/bin/echo", "test"]
      - matchSnapshot:
          path: spec.template.spec

  - it: should add PersistentVolumeClaim as volume when in standalone mode and persistence.enabled is true
    template: deployment.yaml
    set:
      chartMode: standalone
      clusterName: helm-lint.example.com
      persistence:
        enabled: true
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            persistentVolumeClaim:
              claimName: RELEASE-NAME
      - matchSnapshot:
          path: spec.template.spec

  - it: should not add PersistentVolumeClaim as volume when in standalone mode and persistence.enabled is false
    template: deployment.yaml
    set:
      chartMode: standalone
      clusterName: helm-lint.example.com
      persistence:
        enabled: false
    asserts:
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: data
            persistentVolumeClaim:
              claimName: RELEASE-NAME
      - matchSnapshot:
          path: spec.template.spec

  - it: should add PersistentVolumeClaim as volume when in custom mode and persistence.enabled is true
    template: deployment.yaml
    set:
      chartMode: custom
      clusterName: helm-lint.example.com
      persistence:
        enabled: true
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            persistentVolumeClaim:
              claimName: RELEASE-NAME
      - matchSnapshot:
          path: spec.template.spec

  - it: should not add PersistentVolumeClaim as volume when in custom mode and persistence.enabled is false
    template: deployment.yaml
    set:
      chartMode: custom
      clusterName: helm-lint.example.com
      persistence:
        enabled: false
    asserts:
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: data
            persistentVolumeClaim:
              claimName: RELEASE-NAME
      - matchSnapshot:
          path: spec.template.spec

  - it: should add an operator side-car when operator is enabled
    template: deployment.yaml
    values:
      - ../.lint/operator.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[1].name
          value: operator
      - matchSnapshot:
          path: spec.template.spec.containers[1]

  - it: should add named PersistentVolumeClaim as volume when in standalone mode, persistence.existingClaimName is set and persistence.enabled is true
    template: deployment.yaml
    values:
      - ../.lint/standalone-existingpvc.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            persistentVolumeClaim:
              claimName: teleport-storage
      - matchSnapshot:
          path: spec.template.spec

  - it: should not add named PersistentVolumeClaim as volume when in standalone mode, persistence.existingClaimName is set but persistence.enabled is false
    template: deployment.yaml
    values:
      - ../.lint/standalone-existingpvc.yaml
    set:
      persistence:
        enabled: false
    asserts:
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: data
            persistentVolumeClaim:
              claimName: teleport-storage
      - matchSnapshot:
          path: spec.template.spec

  - it: should add named PersistentVolumeClaim as volume when in custom mode and persistence.existingClaimName is set
    template: deployment.yaml
    values:
      - ../.lint/standalone-existingpvc.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            persistentVolumeClaim:
              claimName: teleport-storage
      - matchSnapshot:
          path: spec.template.spec

  - it: should not add named PersistentVolumeClaim as volume when in custom mode, persistence.existingClaimName is set and persistence.enabled is false
    template: deployment.yaml
    values:
      - ../.lint/standalone-existingpvc.yaml
    set:
      persistence:
        enabled: false
    asserts:
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: data
            persistentVolumeClaim:
              claimName: teleport-storage
      - matchSnapshot:
          path: spec.template.spec

  - it: should add emptyDir for data in AWS mode
    template: deployment.yaml
    values:
      - ../.lint/aws-ha.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            emptyDir: {}
      - matchSnapshot:
          path: spec.template.spec

  - it: should add emptyDir for data in GCP mode
    template: deployment.yaml
    values:
      - ../.lint/gcp-ha.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: data
            emptyDir: {}
      - matchSnapshot:
          path: spec.template.spec

  - it: should set priorityClassName when set in values
    template: deployment.yaml
    values:
      - ../.lint/priority-class-name.yaml
    asserts:
      - equal:
          path: spec.template.spec.priorityClassName
          value: system-cluster-critical
      - matchSnapshot:
          path: spec.template.spec

  - it: should set probeTimeoutSeconds when set in values
    template: deployment.yaml
    values:
      - ../.lint/probe-timeout-seconds.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.timeoutSeconds
          value: 5
      - matchSnapshot:
          path: spec.template.spec

  - it: should not mount TLS secrets when when highAvailability.certManager.enabled is false and tls.existingSecretName is not set
    template: deployment.yaml
    set:
      clusterName: helm-lint-test-cluster
    asserts:
      - notContains:
          path: spec.template.spec.volumes
          content:
            name: teleport-tls
            secret:
              secretName: teleport-tls
      - notContains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport-tls
            name: teleport-tls
            readOnly: true
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount cert-manager TLS secret when highAvailability.certManager.enabled is true
    template: deployment.yaml
    values:
      - ../.lint/cert-manager.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: teleport-tls
            secret:
              secretName: teleport-tls
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport-tls
            name: teleport-tls
            readOnly: true
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount tls.existingSecretName when set in values
    template: deployment.yaml
    values:
      - ../.lint/existing-tls-secret.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: teleport-tls
            secret:
              secretName: helm-lint-existing-tls-secret
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport-tls
            name: teleport-tls
            readOnly: true
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount tls.existingCASecretName and set environment when set in values
    template: deployment.yaml
    values:
      - ../.lint/existing-tls-secret-with-ca.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: teleport-tls
            secret:
              secretName: helm-lint-existing-tls-secret
      - contains:
          path: spec.template.spec.volumes
          content:
            name: teleport-tls-ca
            secret:
              secretName: helm-lint-existing-tls-secret-ca
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport-tls
            name: teleport-tls
            readOnly: true
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport-tls-ca
            name: teleport-tls-ca
            readOnly: true
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: SSL_CERT_FILE
            value: /etc/teleport-tls-ca/ca.pem
      - matchSnapshot:
          path: spec.template.spec

  - it: should mount tls.existingCASecretName and set extra environment when set in values
    template: deployment.yaml
    values:
      - ../.lint/existing-tls-secret-with-ca.yaml
      - ../.lint/extra-env.yaml
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: teleport-tls
            secret:
              secretName: helm-lint-existing-tls-secret
      - contains:
          path: spec.template.spec.volumes
          content:
            name: teleport-tls-ca
            secret:
              secretName: helm-lint-existing-tls-secret-ca
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport-tls
            name: teleport-tls
            readOnly: true
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: /etc/teleport-tls-ca
            name: teleport-tls-ca
            readOnly: true
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: SSL_CERT_FILE
            value: /etc/teleport-tls-ca/ca.pem
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: SOME_ENVIRONMENT_VARIABLE
            value: some-value
      - matchSnapshot:
          path: spec.template.spec

  - it: should set minReadySeconds in non-standalone mode
    template: deployment.yaml
    set:
      chartMode: custom
      highAvailability:
        minReadySeconds: 60
    asserts:
      - equal:
          path: spec.minReadySeconds
          value: 60
