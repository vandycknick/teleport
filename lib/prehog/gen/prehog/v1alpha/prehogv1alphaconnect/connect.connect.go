// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: prehog/v1alpha/connect.proto

package prehogv1alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha "github.com/gravitational/teleport/lib/prehog/gen/prehog/v1alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ConnectReportingServiceName is the fully-qualified name of the ConnectReportingService service.
	ConnectReportingServiceName = "prehog.v1alpha.ConnectReportingService"
)

// ConnectReportingServiceClient is a client for the prehog.v1alpha.ConnectReportingService service.
type ConnectReportingServiceClient interface {
	SubmitConnectEvent(context.Context, *connect_go.Request[v1alpha.SubmitConnectEventRequest]) (*connect_go.Response[v1alpha.SubmitConnectEventResponse], error)
}

// NewConnectReportingServiceClient constructs a client for the
// prehog.v1alpha.ConnectReportingService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectReportingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ConnectReportingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &connectReportingServiceClient{
		submitConnectEvent: connect_go.NewClient[v1alpha.SubmitConnectEventRequest, v1alpha.SubmitConnectEventResponse](
			httpClient,
			baseURL+"/prehog.v1alpha.ConnectReportingService/SubmitConnectEvent",
			opts...,
		),
	}
}

// connectReportingServiceClient implements ConnectReportingServiceClient.
type connectReportingServiceClient struct {
	submitConnectEvent *connect_go.Client[v1alpha.SubmitConnectEventRequest, v1alpha.SubmitConnectEventResponse]
}

// SubmitConnectEvent calls prehog.v1alpha.ConnectReportingService.SubmitConnectEvent.
func (c *connectReportingServiceClient) SubmitConnectEvent(ctx context.Context, req *connect_go.Request[v1alpha.SubmitConnectEventRequest]) (*connect_go.Response[v1alpha.SubmitConnectEventResponse], error) {
	return c.submitConnectEvent.CallUnary(ctx, req)
}

// ConnectReportingServiceHandler is an implementation of the prehog.v1alpha.ConnectReportingService
// service.
type ConnectReportingServiceHandler interface {
	SubmitConnectEvent(context.Context, *connect_go.Request[v1alpha.SubmitConnectEventRequest]) (*connect_go.Response[v1alpha.SubmitConnectEventResponse], error)
}

// NewConnectReportingServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectReportingServiceHandler(svc ConnectReportingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/prehog.v1alpha.ConnectReportingService/SubmitConnectEvent", connect_go.NewUnaryHandler(
		"/prehog.v1alpha.ConnectReportingService/SubmitConnectEvent",
		svc.SubmitConnectEvent,
		opts...,
	))
	return "/prehog.v1alpha.ConnectReportingService/", mux
}

// UnimplementedConnectReportingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectReportingServiceHandler struct{}

func (UnimplementedConnectReportingServiceHandler) SubmitConnectEvent(context.Context, *connect_go.Request[v1alpha.SubmitConnectEventRequest]) (*connect_go.Response[v1alpha.SubmitConnectEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("prehog.v1alpha.ConnectReportingService.SubmitConnectEvent is not implemented"))
}
