// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package prehog.v1alpha;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/gravitational/teleport/lib/prehog/gen/prehog/v1alpha";

message UserLoginEvent {
  // anonymized
  string user_name = 1;
  // local/github/saml/oidc
  string connector_type = 2;
}

message SSOCreateEvent {
  // github/saml/oidc
  string connector_type = 1;
}

message ResourceCreateEvent {
  // TODO(espadolini): is a resource the teleport process or the
  // databases/desktops/kube clusters accessed through it?
  string resource_type = 1;

  // TODO(espadolini): flags for Discover, autodiscovery, join scripts?
}

message SessionStartEvent {
  // anonymized
  string user_name = 1;
  // ssh/kube/desktop, maybe db?
  string session_type = 2;
}

message UIBannerClickEvent {
  // anonymized
  string user_name = 1;
  // cluster alert name
  string alert = 2;
}

message UIOnboardCompleteGoToDashboardClickEvent {
  // anonymized
  string user_name = 1;
}

message UIOnboardAddFirstResourceClickEvent {
  // anonymized
  string user_name = 1;
}

message UIOnboardAddFirstResourceLaterClickEvent {
  // anonymized
  string user_name = 1;
}

message UIOnboardSetCredentialSubmitEvent {
  // anonymized
  string user_name = 1;
}

message UIOnboardRegisterChallengeSubmitEvent {
  // anonymized
  string user_name = 1;
  string mfa_type = 2;
  string login_flow = 3;
}

message UIRecoveryCodesContinueClickEvent {
  // anonymized
  string user_name = 1;
}

message UIRecoveryCodesCopyClickEvent {
  // anonymized
  string user_name = 1;
}

message UIRecoveryCodesPrintClickEvent {
  // anonymized
  string user_name = 1;
}

// DiscoverMetadata contains common metadata for Discover related events.
message DiscoverMetadata {
  // Uniquely identifies Discover wizard "session". Will allow to correlate
  // events within the same Discover wizard run.
  string id = 1;

  // anonymized
  string user_name = 2;
}

// DiscoverResource represents a resource type.
enum DiscoverResource {
  DISCOVER_RESOURCE_UNSPECIFIED = 0;
  DISCOVER_RESOURCE_SERVER = 1;
  DISCOVER_RESOURCE_KUBERNETES = 2;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_SELF_HOSTED = 3;
  DISCOVER_RESOURCE_DATABASE_MYSQL_SELF_HOSTED = 4;
  DISCOVER_RESOURCE_DATABASE_MONGODB_SELF_HOSTED = 5;
  DISCOVER_RESOURCE_DATABASE_POSTGRES_RDS = 6;
  DISCOVER_RESOURCE_DATABASE_MYSQL_RDS = 7;
  DISCOVER_RESOURCE_APPLICATION_HTTP = 8;
  DISCOVER_RESOURCE_APPLICATION_TCP = 9;
  DISCOVER_RESOURCE_WINDOWS_DESKTOP = 10;
}

// DiscoverResourceMetadata contains common metadata identifying resource type being added.
message DiscoverResourceMetadata {
  // Resource type that is being added.
  DiscoverResource resource = 1;
}

// DiscoverStatus represents a Discover Step outcome.
enum DiscoverStatus {
  DISCOVER_STATUS_UNSPECIFIED = 0;
  // The user tried to complete the action and it succeeded.
  DISCOVER_STATUS_SUCCESS = 1;
  // The system skipped the step.
  // For example:
  // When setting up a Database and there's already a Database Service proxying the DB.
  // In this case the Database Agent installation is skipped.
  DISCOVER_STATUS_SKIPPED = 2;
  // The user tried to complete the action and it failed.
  DISCOVER_STATUS_ERROR = 3;
  // The user did not complete the action and left the wizard.
  DISCOVER_STATUS_ABORTED = 4;
}

// DiscoverStepStatus contains fields that track a particular step outcome,
// for example connection test failed or succeeded, or user aborted the step.
message DiscoverStepStatus {
  // Indicates the step outcome.
  DiscoverStatus status = 1;
  // Contains error details in case of Error Status.
  // We have to be careful to not include any identifyable infomation like server addresses here.
  string error = 2;
}

// UIDiscoverStartedEvent is emitted when the wizard opens.
message UIDiscoverStartedEvent {
  DiscoverMetadata metadata = 1;
  DiscoverStepStatus status = 2;
}

// UIDiscoverResourceSelectionEvent is emitted when user selected resource type to add
// and proceeded to the next step.
message UIDiscoverResourceSelectionEvent {
  DiscoverMetadata metadata = 1;
  DiscoverResourceMetadata resource = 2;
  DiscoverStepStatus status = 3;
}

message SubmitEventRequest {
  // anonymized
  string cluster_name = 1;

  // optional, will default to the ingest time if unset
  google.protobuf.Timestamp timestamp = 2;

  oneof event {
    UserLoginEvent user_login = 3;
    SSOCreateEvent sso_create = 4;
    ResourceCreateEvent resource_create = 5;
    SessionStartEvent session_start = 6;

    UIBannerClickEvent ui_banner_click = 7;
    UIOnboardCompleteGoToDashboardClickEvent ui_onboard_complete_go_to_dashboard_click = 9;
    UIOnboardAddFirstResourceClickEvent ui_onboard_add_first_resource_click = 10;
    UIOnboardAddFirstResourceLaterClickEvent ui_onboard_add_first_resource_later_click = 11;
    UIOnboardSetCredentialSubmitEvent ui_onboard_set_credential_submit = 12;
    UIOnboardRegisterChallengeSubmitEvent ui_onboard_register_challenge_submit = 13;
    UIRecoveryCodesContinueClickEvent ui_recovery_codes_continue_click = 14;
    UIRecoveryCodesCopyClickEvent ui_recovery_codes_copy_click = 15;
    UIRecoveryCodesPrintClickEvent ui_recovery_codes_print_click = 16;

    UIDiscoverStartedEvent ui_discover_started_event = 17;
    UIDiscoverResourceSelectionEvent ui_discover_resource_selection_event = 18;
  }
  reserved 8; // UIOnboardGetStartedClickEvent
  reserved "ui_onboard_get_started_click";
}
message SubmitEventResponse {}

message HelloTeleportRequest {}
message HelloTeleportResponse {}

service TeleportReportingService {
  rpc SubmitEvent(SubmitEventRequest) returns (SubmitEventResponse) {}
  rpc HelloTeleport(HelloTeleportRequest) returns (HelloTeleportResponse) {}
}
