// Copyright 2022 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package prehog.v1alpha;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/gravitational/teleport/lib/prehog/gen/prehog/v1alpha";

message ConnectClusterLoginEvent {
  // anonymized
  string cluster_name = 1;
  // anonymized
  string user_name = 2;
  // local/github/saml/oidc/passwordless
  string connector_type = 3;
  string arch = 4;
  string os = 5;
  string os_version = 6;
  string app_version = 7;
}

message ConnectProtocolUseEvent {
  // anonymized
  string cluster_name = 1;
  // anonymized
  string user_name = 2;
  // one of ssh/db/kube
  string protocol = 3;
}

message ConnectAccessRequestCreateEvent {
  // anonymized
  string cluster_name = 1;
  // anonymized
  string user_name = 2;
  // one of role/resource
  string kind = 3;
}

message ConnectAccessRequestReviewEvent {
  // anonymized
  string cluster_name = 1;
  // anonymized
  string user_name = 2;
}

message ConnectAccessRequestAssumeRoleEvent {
  // anonymized
  string cluster_name = 1;
  // anonymized
  string user_name = 2;
}

message ConnectFileTransferRunEvent {
  // anonymized
  string cluster_name = 1;
  // anonymized
  string user_name = 2;
  bool is_upload = 3;
}

message ConnectUserJobRoleUpdateEvent {
  // Software Engineer, DevOps Engineer etc.
  string job_role = 1;
}

message SubmitConnectEventRequest {
  // UUID
  string distinct_id = 1;

  // optional, will default to the ingest time if unset
  google.protobuf.Timestamp timestamp = 2;

  oneof event {
    ConnectClusterLoginEvent cluster_login = 3;
    ConnectProtocolUseEvent protocol_use = 4;
    ConnectAccessRequestCreateEvent access_request_create = 5;
    ConnectAccessRequestReviewEvent access_request_review = 6;
    ConnectAccessRequestAssumeRoleEvent access_request_assume_role = 7;
    ConnectFileTransferRunEvent file_transfer_run = 8;
    ConnectUserJobRoleUpdateEvent user_job_role_update = 9;
  }
}

message SubmitConnectEventResponse {}

service ConnectReportingService {
  rpc SubmitConnectEvent(SubmitConnectEventRequest) returns (SubmitConnectEventResponse) {}
}
